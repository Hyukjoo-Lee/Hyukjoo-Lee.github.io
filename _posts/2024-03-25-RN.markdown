---
title: "{ RN } RN note"
date: 2024-03-25 21:00:00 +07:00
# tags: [Transaction, Isolation, Database, ACID]
# description: Notes of Transaction isolation level
---

## Async, Await, Promises

### Async VS Sync

1. **동기(Synchronous)**
- 동기적인 작업은 순차적으로 실행됩니다. 즉, 한 작업이 완료되기 전에 다음 작업이 시작되지 않습니다. 
- 코드가 위에서부터 아래로 차례대로 실행되는 것과 같은 개념입니다. 만약 어떤 작업이 시간이 오래 걸린다면, 다음 작업은 그 작업이 완료될 때까지 기다려야 합니다.

2. **비동기(Asynchronous)**: 
- 비동기적인 작업은 순차적으로 실행되지 않습니다. 
- 한 작업의 완료 여부와 상관없이 다음 작업이 시작될 수 있습니다. 이 때문에 다음 작업은 이전 작업이 완료되기를 기다리지 않고 동시에 실행될 수 있습니다. 
- 비동기적인 작업은 보통 시간이 오래 걸리는 작업이나 외부 리소스를 이용할 때 유용합니다.

간단한 예로, 웹 페이지에서 이미지를 불러오는 작업을 생각해보세요. 동기적으로 처리하면 이미지가 로드될 때까지 다른 작업을 수행하지 못합니다. 그러나 비동기적으로 처리하면 이미지를 로드하는 동안에도 다른 작업을 계속할 수 있습니다.

```
동기작업이란 코드내 작업들이 차례대로, 그러니까 예를 들어 10줄의 코드가 있으면, 첫번째 코드가 끝나야 2번부터 10번까지 코드가 실행될 수 있는 작업방식을 말하고, 

비동기작업이란 이런 작업과 다르게 1번 작업이 끝나지 않더라도 다음 작업들이 동시에 실행되는 작업방식이다. 예를 들어서, 앱에서 파일을 다운로드할 때 비동기 처리를 하면 다운로드가 완료되지 않더라도 다음 작업이 실행될 수 있는 거고, 여기서 다음 작업을 실행하기 위하여 특정 파일이 필요할 경우 await 구문을 붙여서 동기처리를 해주면 원하는 작업 로직을 구현 할 수 있다. 
다운로드가 완료가 되어야 다음 작업이 처리될 수 있게 해준다 

```

### Promise
- Promise는 비동기 작업의 최종 완료 또는 실패를 나타내는 객체입니다.
```javascript

const getUser = username => {
    const API_URL = `https://api.github.com/users/${username}`;
    // Fetch data from the constructed API URL
    return fetch(API_URL)
        // Parse the response data as JSON
        .then((response) => response.json());
}

// Call the getUser function with the username 'openai'
getUser('openai')
    // Once the data is fetched and parsed, log the result to the console
    .then((val) => console.log(val));
```

### Async/Await

- Async/await는 Promise를 더 쉽게 다룰 수 있도록 도와주는 문법입니다.
- async 함수는 항상 Promise를 반환합니다. 함수 내부에서 await 키워드를 사용하여 비동기 작업을 기다릴 수 있습니다.

```javascript
const getUser = async username => {
    const API_URL = `https://api.github.com/users/${username}`;
    const res = await fetch(API_URL);
    const data = await res.json();
    return data;
}

// Call the getUser function with the username 'openai'
getUser('openai')
    // Once the data is fetched and parsed, log the result to the console
    .then((val) => console.log(val));
```

### Promise with Error Handling

- Promise를 사용하여 비동기 작업을 수행하고, 작업이 성공하면 resolve를 호출하여 결과를 반환하고, 실패하면 reject를 호출하여 에러를 반환합니다.
- 에러 처리를 위해 reject를 사용하여 에러를 전달하고, 호출한 쪽에서 catch를 사용하여 에러를 처리합니다.

```javascript
const getGithubUser = username => {
    return new Promise((resolve, reject) => {
        fetch(`https://api.github.com/users/${username}`)
            // Parse the response data as JSON
            .then(response => response.json())
            .then(data => {
                // Check if the user is not found
                if (data.message === "Not Found") {
                    // If user not found, reject the promise with an error message
                    reject("User not found");
                } else {
                    // If user found, resolve the promise with the user data
                    resolve(data);
                }
            })
            // If there is any error during the process, reject the promise with the error
            .catch(err => reject(err));
    });
}

// Call the getGithubUser function with the username 'jaydon'
// Log the user data if resolved, or log the error message if rejected
getGithubUser("jaydon")
    .then(val => console.log(val))
    .catch(err => console.log(err));
```
